/*
BFS is implemented using queue where adjecent nodes are visited first
*/


#include<bits/stdc++.h>
#define ll long long
#define mod 1000000007
using namespace std;
int32_t main() {
  
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  
  int n,m;
  cin>>n>>m;

  vector<int> adjlist[n+1];

  for (int i = 0; i < m; ++i)
  {
    int a,b;
    cin>>a>>b;
    adjlist[a].push_back(b);
    adjlist[b].push_back(a);

  }
  
  int visited[n+1] = {0};
  vector<int> ans;
  for(int i=1;i<=n;i++)
  {
    if (!visited[i])
    {    queue<int> q;
      q.push(i);
      visited[i] = 1;
      while(!q.empty())
      {
        int node = q.front();
        q.pop();
        ans.push_back(node);
        for(auto it:adjlist[node])
        {
          if(!visited[it])
          {
            q.push(it);
            visited[it] = 1;
          }
        }
      }
    }
  }
  for(auto it:ans)
  {
    cout<<it<<" ";
  }
  return 0;
}
