https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/gold-mines-10/
https://practice.geeksforgeeks.org/problems/gold-mine-problem2608/1


https://youtu.be/tQU4rkmPyV0



#include<bits/stdc++.h>
using namespace std;
#define ll long long

int dp[100001][3];
signed main() {
  #ifndef ONLINE_JUDGE
  freopen("input.txt","r",stdin);
  freopen("output.txt","w",stdout);
  #endif
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  cout.tie(NULL);
  int n,m;
  cin>>n>>m;
  int a[n][m] = {0};
  for (int i = 0; i < n; ++i)
  {
    for (int j = 0; j<m; ++j)
    {
      cin>>a[i][j];
    }
  }
int sum=0;
if(n==1 && m==1)
cout<<a[0][0];
  if(n==1)
  {
    for (int i = 0; i < m; ++i)
    {
      sum += a[0][i];
    }

    cout<<sum<<endl;
  }
  if (m == 1)
  {

    for (int i = 0; i < n; ++i)
    {
      sum += a[i][0];
    }
    cout<<sum<<endl;

  }

       
        for(int i=m-2;i>=0;i--)
        {
            for(int j=0;j<n;++j)
            {
                if(j == 0)
                {
                a[j][i] = a[j][i] + max(a[j][i+1], a[j+1][i+1]); 
                  
                }
                else if(j == n-1)
                {
                  a[j][i] = a[j][i] + max(a[j][i+1], a[j-1][i+1]); 
                
                }
                else
                {

                a[j][i] = a[j][i] + max(a[j-1][i+1] , max(a[j][i+1],a[j+1][i+1])); 
                }
                
            }
        }
        for (int i = 0; i < n; ++i)
        {
          for (int j = 0; j<m; ++j)
          {
            cout<<a[i][j]<<" ";
          }
          cout<<endl;
        }
        int maxi = INT_MIN;
        for(int i=0;i<n;i++)
        {
            maxi = max(maxi,a[i][0]);
        }
        cout<<maxi;
}